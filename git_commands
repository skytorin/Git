# Просмотр версии приложения git
git verion

# Инициализация репозитария
git init

# Текущее состояние
git status

# Получение подробной информации о последнем коммите
git show

# Получение подробной информации о указанном коммите
git snow 772685b780259c4313d1f489a47f4c1dccc19266

# Показывает все имеющиеся коммиты с их ID и комментариями
git log

# Cписок всех выполненных операций:
git reflog

# Откат к последнему закомиченному состоянию
git restore
----------------------------------------------------------------------------------------
# Добавляем файл для отслеживания
git add README.md

# Добавление всех файлов в отслеживание из текущей директории
git add .

# Исключение файлов из отслеживания их изменений
git rm --cached ./Lesson_01/.terraform

# Рекурсирвное исключение файлов из отслеживания их изменений
git rm -r --cached ./Lesson_03/.terraform/
----------------------------------------------------------------------------------------
# Коммит файлов репозитария
git commit -m "My First Commit"

# Одновременное добавление и коммит всех ранее добавленных файлов
git commit -am "My Add and commit"
----------------------------------------------------------------------------------------
# Создание файла в котором будут задаваться исключаемые файлы
touch .gitignore

# Присеры  исключения файлов из отслеживаня, находящиеся в .gitignore
*.py[cod]             - будут игнорироваться файлы следующих расширений: *.pyc, *.pyo, *.pyd
name.yaml             - игнорируется один конкретный файл
log/                  - игнорируется папка log
resources/main.json   - игнорируется файл находящийся в папке
----------------------------------------------------------------------------------------
# Задание констант имени и емейла для всей системы, которые отражаютмся в коммитах
git config --system user.name "SkyTorin"
git config --system user.email "nick555@bk.ru"

# Задание настроек для всех репозиториеа одного конкретного пользователя
git config --global user.name "SkyTorin"
git config --global user.email "nick555@bk.ru"

# Задание констант имени и емейла для одного конкретного репозитария
git config --local user.name "SkyTorin"
git config --local user.email "nick555@bk.ru"
----------------------------------------------------------------------------------------
# Просмтор всех имеющихся веток проекта
git branch -a

# Создание новой ветки new-api2
git branch new-api2

# Переход в ранее созданную ветку new-api
git checkout new-api

# Создает и переходит в новую ветку new-api2
git checkout -b new-api2

# Cлияние веток
git merge new-api

# Удаление ветки которая была хотя бы единожды замержена
git branch -d new-api

# Удаление ветки, которая не была ни разу смержена
git branch -D new-api
----------------------------------------------------------------------------------------
# Просмотр имён/адресов внешних репозитариев связанных с текущим локальным репозитарием
git remote -v

# Более детальный вывод информация о именах и адресах удаленных репозитариев
git remote show origin

# Добавление внешнего адреса репозитария с именем origin
git remote add origin git@github.com:skytorin/Terraform.git

# Переименование имени внешнего адреса из origin в origin2
git remote rename origin origin2

# Удаление адреса внешнего репозитария с именем origin
git remote rm origin
----------------------------------------------------------------------------------------
# Отправка изменений в удаленный репозиторий
git push <remote-name> <branch-name>
git push -u origin master
git push

# Получить последние изменения с удалённого репозитария
git pull <remote-name> <branch-name>
git pull

# Показывает изменения в файле с момента последнего коммита
git diff
----------------------------------------------------------------------------------------
# Отмена последнего коммита в локальном репозитарии: 
git reset HEAD~

# Полное удаление последего коммита, включая все изменения файлов данного коммита:
git reset --hard HEAD~1

# Отображение списка всех выполненых операций и откат к любой из них по индексу:
git reflog
git reset HEAD@{index}

----------------------------------------------------------------------------------------
# Восстановление удаленных файлов (после git rm)
# Обычно чтобы просто откатить состояние файла до исходного в текущей версии (даже после ручного удаления), нужно сделать такой чекаут
git checkout -- file_name.ext
# Если удаление делалось через git rm, то так просто счекаутить обратно состояние уже не получится, поскольку git же думает что мы специально файл удалили. 
# Поэтому надо сделать сначала ресет файла в индексе, а уже потом чекаут (см. git help reset)
git reset -- file_name.ext
git checkout -- file_name.ext
# Если после add, но до коммита найден ошибочно добавленный файл/папка, то такой же ресет поможет убрать его из следующего коммита.
----------------------------------------------------------------------------------------
# Правка комментария к последнему коммиту:
git commit --amend

# Добавления файла в последней коммит:
git add missed-file.txt
git commit --amend








